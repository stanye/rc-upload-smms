{"version":3,"sources":["Upload.js","Preview.js","App.js","serviceWorker.js","index.js"],"names":["UploadUrl","UploadSmms","getResponse","_ref","data","code","restProps","Object","objectWithoutProperties","Error","msg","_this","renderList","upload","file","FormData","append","Axios","post","then","onChange","e","files","target","uploadFiles","Array","prototype","slice","call","forEach","clickUpload","el","uploader","click","saveUploader","node","onFileUploadSuccess","props","react_default","a","createElement","role","tabIndex","className","onClick","this","type","accept","multiple","style","display","ref","Component","Preview","copy","url","delete","get","_this2","fileList","map","alt","hash","deleteUrl","filename","height","width","key","src","lib_default","value","React","PureComponent","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","destroy","setState","destroyed","uploadFileList","console","log","state","concat","toConsumableArray","_this$state","Upload_UploadSmms","src_Preview","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e2147519.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport Axios from 'axios';\n\nconst UploadUrl = 'https://sm.ms/api/upload';\n\nexport default class UploadSmms extends Component {\n  static propTypes = {\n    onFileUploadSuccess: PropTypes.func\n  }\n\n  getResponse = ({data}) => {\n    const {code, ...restProps} = data;\n    if (code !== 'success') {\n      throw new Error(restProps.msg);\n    }\n    return this.renderList(restProps.data);\n  }\n\n  upload = (file) => {\n    const data = new FormData();\n    data.append('smfile', file);\n    data.append('ssl', true);\n    return Axios.post(UploadUrl, data).then(this.getResponse);\n  }\n\n  onChange = (e) => {\n    const {files} = e.target;\n    this.uploadFiles(files);\n  }\n\n  uploadFiles = (files) => {\n    const postFiles = Array.prototype.slice.call(files);\n    postFiles.forEach((file) => {\n      this.upload(file);\n    });\n  }\n\n  clickUpload = () => {\n    const el = this.uploader;\n    if (!el) return;\n    el.click();\n  }\n\n  saveUploader = (node) => {\n    this.uploader = node;\n  }\n\n  renderList = (data) => {\n    const {onFileUploadSuccess} = this.props;\n    onFileUploadSuccess(data);\n  }\n\n  render() {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className=\"upload-button\"\n        onClick={this.clickUpload}\n      >\n        <input\n          type=\"file\"\n          accept=\"image/*\"\n          multiple\n          style={{display: 'none'}}\n          onChange={this.onChange}\n          ref={this.saveUploader}\n        />\n        <button type=\"button\">\n          <span>+ 点击上传</span>\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport copy from 'copy-to-clipboard';\nimport QRCode from 'qrcode.react';\nimport Axios from 'axios';\n\nclass Preview extends React.PureComponent {\n  static propTypes = {\n    fileList: PropTypes.array\n  }\n\n  copy = (url) => {\n    copy(url);\n  }\n\n  delete = url => Axios.get(url)\n\n  render() {\n    const {fileList} = this.props;\n\n    return (\n      <div className=\"file-list\">\n        {fileList.map(({\n          url,\n          alt,\n          hash,\n          delete: deleteUrl,\n          filename,\n          height,\n          width\n        }) => (\n          <div key={hash} className=\"file\">\n            <div className=\"layout\">\n              <img alt={alt} src={url} />\n            </div>\n            <div className=\"layout\">\n              <p>\n                文件名:\n                {filename}\n              </p>\n              <p>\n                宽:\n                {width}\n                px\n              </p>\n              <p>\n                高:\n                {height}\n                px\n              </p>\n              <div>\n                <button className=\"copy\" type=\"button\" onClick={() => this.copy(url)}>复制链接</button>\n                <button className=\"delete\" type=\"button\" onClick={() => this.delete(deleteUrl)}>删除照片</button>\n              </div>\n              <div>\n                <QRCode className=\"qrcode\" value={url} />\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Preview;\n","import React, {Component} from 'react';\nimport UploadSmms from './Upload';\nimport Preview from './Preview';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      destroyed: false,\n      fileList: []\n    };\n  }\n\n  destroy = () => {\n    this.setState({\n      destroyed: true\n    });\n  }\n\n  uploadFileList = (file) => {\n    console.log('file: ', file);\n    const {fileList} = this.state;\n    this.setState({\n      fileList: [\n        ...fileList,\n        file\n      ]\n    });\n  }\n\n  render() {\n    const {fileList, destroyed} = this.state;\n    if (destroyed) {\n      return null;\n    }\n    return (\n      <div className=\"App\">\n        <UploadSmms onFileUploadSuccess={this.uploadFileList} />\n        <Preview fileList={fileList} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}